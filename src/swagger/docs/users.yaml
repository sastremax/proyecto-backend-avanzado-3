paths:
  /api/users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Usuarios
      responses:
        "200":
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - _id: "682b9e814501d9f87aecb514"
                  first_name: "Laura"
                  last_name: "Urbina Castañeda"
                  email: "Cristian_SeguraMena@yahoo.com"
                  age: 39
                  cart: "682b9e814501d9f87aecb512"
                  role: "user"
                  __v: 0
        "500":
          description: Error interno del servidor
          content:
            application/json:
              example:
                status: error
                error: "Ocurrió un error inesperado en el servidor"

  /api/users/{uid}:
    get:
      summary: Obtener un usuario por su ID
      tags:
        - Usuarios
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID del usuario a obtener
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                _id: "682b9e814501d9f87aecb514"
                first_name: "Laura"
                last_name: "Urbina Castañeda"
                email: "Cristian_SeguraMena@yahoo.com"
                age: 39
                cart: "682b9e814501d9f87aecb512"
                role: "user"
                __v: 0
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              example:
                status: error
                error: "Usuario no encontrado"
        "500":
          description: Error interno del servidor
          content:
            application/json:
              example:
                status: error
                error: "Ocurrió un error inesperado en el servidor"

    put:
      summary: Actualizar un usuario por su ID
      tags:
        - Usuarios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID del usuario a actualizar
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        "200":
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
              example:
                status: success
                message: Usuario actualizado correctamente
                data:
                  _id: "682b9e814501d9f87aecb514"
                  first_name: "Mario"
                  last_name: "García"
                  email: "mario@example.com"
                  age: 42
                  cart: "682b9e814501d9f87aecb512"
                  role: "user"
                  __v: 0
        "400":
          description: Datos inválidos para la actualización
          content:
            application/json:
              example:
                status: error
                error: "Datos inválidos"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              example:
                status: error
                error: "Usuario no encontrado"
        "401":
          description: No autorizado
          content:
            application/json:
              example:
                status: error
                error: "No autorizado: se requiere autenticación."
        "500":
          description: Error interno del servidor
          content:
            application/json:
              example:
                status: error
                error: "Error inesperado en el servidor"

    delete:
      summary: Eliminar un usuario por su ID
      tags:
        - Usuarios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID del usuario a eliminar
      responses:
        "200":
          description: Usuario eliminado exitosamente
          content:
            application/json:
              example:
                status: success
                message: "Usuario eliminado correctamente"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              example:
                status: error
                error: "Usuario no encontrado"

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: ID autogenerado por MongoDB
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        age:
          type: integer
        cart:
          type: string
        role:
          type: string
        __v:
          type: integer
      example:
        _id: "682b9e814501d9f87aecb514"
        first_name: "Laura"
        last_name: "Urbina Castañeda"
        email: "Cristian_SeguraMena@yahoo.com"
        age: 39
        cart: "682b9e814501d9f87aecb512"
        role: "user"
        __v: 0

  requestBodies:
    NewUser:
      description: Datos necesarios para registrar un nuevo usuario
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                type: string
                description: Nombre del usuario
              last_name:
                type: string
                description: Apellido del usuario
              email:
                type: string
                description: Correo electrónico
              password:
                type: string
                description: Contraseña
            required:
              - first_name
              - last_name
              - email
              - password
            example:
              first_name: Laura
              last_name: López
              email: laura@example.com
              password: 12345678

    UpdateUser:
      description: Datos para actualizar un usuario existente
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                type: string
                description: Nombre del usuario
              last_name:
                type: string
                description: Apellido del usuario
              email:
                type: string
                description: Correo electrónico
              age:
                type: integer
                description: Edad del usuario
              role:
                type: string
                description: Rol del usuario (user o admin)
            required:
              - first_name
              - last_name
              - email
            example:
              first_name: Mario
              last_name: García
              email: mario@example.com
              age: 42
              role: user
